{"version":3,"sources":["store/index.js","components/Menu.js","components/PollItem.js","components/Container.js","components/UI/Spinner.js","components/pages/Home.js","components/UI/Button.js","components/pages/Poll.js","components/pages/CreatePoll.js","components/pages/NotFound.js","App.js","index.js","tronServices/utils.js","tronServices/constants.js","tronServices/pollContract.js"],"names":["initialState","wallet","store","createStore","state","action","type","getUserTronWallet","require","tronPollDappContract","tronPollTokenContract","MenuStyled","styled","div","Menu","history","useHistory","location","useLocation","useSelector","dispatch","useDispatch","focusable","viewBox","aria-hidden","d","className","pathname","onClick","push","userWallet","swal","href","target","rel","StypedPoll","PollItem","props","onSelect","poll","question","StypedContainer","Container","children","StyledDiv","size","Spinner","getPoll","getPollCount","Home","useState","pollArray","setPollArray","pageLoading","setPageLoading","useEffect","then","pollCount","pollIndexArray","Array","fill","map","_","index","Promise","all","result","_pollArray","forEach","item","catch","error","console","log","length","pollIndex","StyledButton","button","disabled","Button","getVoteCounter","vote","getUnconfirmedTransactionInfo","tronHexToAscii","PollWrapper","PollQuestion","PollDates","PollAnswer","AnswerVoteCount","Poll","match","params","setPoll","voteCounter","setVoteCounter","selectedAnswer","setSelectedAnswer","voteLoading","setVoteLoading","onVoteHandler","startDate","Date","getTime","finishDate","transactionId","setTimeout","transactionInfo","transactionMessage","replace","_voteCounter","toISOString","slice","answerNumber","Math","floor","id","name","value","checked","onChange","event","htmlFor","createPoll","StyledItemWrapper","CreatePoll","pollLoading","setPollLoading","answer1","answer2","answer3","answer4","handleChange","field","payload","onSaveHandler","trim","NotFound","App","basename","path","component","exact","ReactDOM","render","document","getElementById","TronWeb","tronConstants","getGeneralTronWeb","HttpProvider","providers","fullNode","tronFullNode","solidityNode","tronSolidityNode","eventServer","tronEventServer","tronGeneralPrivateKey","getUserTronWeb","window","tronWeb","defaultAddress","base58","getTronContract","contractAddress","userOrGeneral","a","contract","at","tronHexToDecimal","valueInHex","toDecimal","toAscii","getTransactionInfo","trx","tronAccounts","publicKey","privateKey","tronGeneralPublicKey","tronUtils","send","polls","call","voteCounters","answer1VoteCounter","answer2VoteCounter","answer3VoteCounter","answer4VoteCounter","answerIndex","setToken"],"mappings":"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","file":"static/js/main.5c3cb34e.chunk.js","sourcesContent":["import {createStore} from 'redux';\n\nconst initialState={\n    wallet:null\n}\n\nconst walletReducer=(state=initialState,action)=>{\n\n    if(action.type==='connect'){\n        return {\n            wallet:action.wallet\n        }\n    }\n\n    if(action.type==='disconnect'){\n        return {\n            wallet:null\n        }\n    }\n\n    return state;\n}\n\n\nconst store=createStore(walletReducer);\n\nexport default store;","import swal from 'sweetalert';\n\nimport { useHistory, useLocation } from 'react-router-dom';\n\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport styled from 'styled-components';\n\nconst { getUserTronWallet }=require('../tronServices/utils');\nconst { tronPollDappContract,tronPollTokenContract }=require('../tronServices/constants');\n\n\n\nconst MenuStyled = styled.div`\n  box-sizing: border-box;\n  width:100%;\n  height:64px;\n  color: #fff;\n  background-color: #3f51b5;\n  display: flex;\n  align-items: center;\n  padding-left: 1.4rem;\n  padding-right: 1.4rem;\n  font-size: 21px;\n  svg{\n    padding-right:1.4rem;\n    fill: currentColor;\n    width: 1em;\n    height: 1em;\n    display: inline-block;\n    font-size: 1.5rem;\n    transition: fill 200ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;\n    flex-shrink: 0;\n    user-select: none;\n  }\n  span.title{\n    flex-grow:1;\n  }\n  span.menu{\n    cursor:pointer;\n    font-size: 16px;\n    margin-left:0.7rem;\n    margin-right:0.7rem;\n  }\n\n  span.wallet{\n    position:absolute;\n    right:24px;\n    top:68px;\n    color:#000;\n    font-size:12px;\n    cursor:pointer\n  }\n  span.wallet.connected{\n    cursor:default;\n  }\n\n  div.contracts{\n    position:absolute;\n    left:24px;\n    top:68px;\n    color:#000;\n    font-size:12px;\n    display:flex;\n    flex-direction:column;\n  }\n`;\n\nconst Menu = () => {\n\n  const history = useHistory();\n  const location = useLocation();\n\n  const wallet=useSelector(state=>state.wallet);\n\n  const dispatch=useDispatch();\n  \n\n  const onConnect=()=>{\n    const userWallet=getUserTronWallet();\n    if(userWallet){\n      dispatch({\n        type:'connect',\n        wallet:userWallet\n      });\n    }else{\n\n      swal('Error','Install tronlink and login to use this DAPP','error');\n       \n      dispatch({\n        type:'disconnect'\n      }); \n    }\n  }\n\n  return (\n    <MenuStyled>\n      <svg focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M3 18h18v-2H3v2zm0-5h18v-2H3v2zm0-7v2h18V6H3z\"></path></svg>\n      <span className=\"title\">Tron React Poll DAPP</span>\n\n      {location.pathname === '/' && (<span className=\"menu\" onClick={() => {\n        history.push('/create-poll')\n      }}>Create a Poll</span>)}\n\n      {location.pathname !== '/' && (<span className=\"menu\" onClick={() => {\n        history.push('/')\n      }}>HOME</span>)}\n\n\n\n      {!wallet && <span className=\"wallet\" onClick={onConnect}>\n        Connect to Tronlink\n      </span>}\n      {wallet && <span className=\"wallet connected\" >Connected: {wallet}</span>}\n\n      <div className=\"contracts\">\n        <a href={`https://shasta.tronscan.org/#/contract/${tronPollDappContract}`} target=\"_blank\" rel=\"noreferrer\">Poll Contract</a>\n        <a href={`https://shasta.tronscan.org/#/contract/${tronPollTokenContract}`} target=\"_blank\" rel=\"noreferrer\">Token Contract</a>\n      </div>      \n\n\n    </MenuStyled>\n  )\n}\n\nexport default Menu;","\nimport styled from 'styled-components';\n\nconst StypedPoll=styled.div`\n    padding: 1rem;\n    font-size: 2rem;\n    border-bottom: 1px solid #eee;\n    margin: 1rem;\n    cursor: pointer;\n    &:hover{\n        opacity:0.8;\n    }\n`;\n\nconst PollItem=(props)=>{\n    return (\n       <StypedPoll onClick={props.onSelect}>\n           {props.poll.question}\n       </StypedPoll>\n    )\n}\n\nexport default PollItem;","import styled from 'styled-components';\n\nconst StypedContainer=styled.div`\n    padding: 1rem;\n    border: 1px solid #eee;\n    margin: 3rem auto;\n    max-width:1280px;\n`;\n\n\nconst Container=(props)=>{\n    return (\n       <StypedContainer>\n           {props.children}\n       </StypedContainer>\n    )\n}\n\nexport default Container;","import React from 'react';\nimport styled from 'styled-components';\n\nconst StyledDiv =styled.div`\nmargin:auto;\n&,\n&:after {\n  border-radius: 50%;\n  overflow: hidden;\n  width: ${props=>props.size * 2}em;\n  height: ${props=>props.size * 2}em;\n}\n& {\n  font-size: 10px;\n  position: relative;\n  text-indent: -9999em;\n  border-top: ${props=>props.size * .22}em solid rgba(255, 255, 255, 0.2);\n  border-right: ${props=>props.size * .22}em solid rgba(255, 255, 255, 0.2);\n  border-bottom: ${props=>props.size * .22}em solid rgba(255, 255, 255, 0.2);\n  border-left: ${props=>props.size * .22}em solid #000000;\n  border-left-color:inherit;\n  -webkit-transform: translateZ(0);\n  -ms-transform: translateZ(0);\n  transform: translateZ(0);\n  -webkit-animation: load8 1.1s infinite linear;\n  animation: load8 1.1s infinite linear;\n}\n@-webkit-keyframes load8 {\n  0% {\n    -webkit-transform: rotate(0deg);\n    transform: rotate(0deg);\n  }\n  100% {\n    -webkit-transform: rotate(360deg);\n    transform: rotate(360deg);\n  }\n}\n@keyframes load8 {\n  0% {\n    -webkit-transform: rotate(0deg);\n    transform: rotate(0deg);\n  }\n  100% {\n    -webkit-transform: rotate(360deg);\n    transform: rotate(360deg);\n  }\n}\n`;\n\nconst Spinner = props => {\n\n    return (\n        <StyledDiv size={props.size ?? 5}>\n            Loading...\n        </StyledDiv>\n    );\n}\n\nexport default Spinner;","import React, {useState, useEffect} from 'react';\nimport {useHistory} from 'react-router-dom';\n\nimport PollItem from '../PollItem';\n\nimport Container from '../Container';\nimport Spinner from '../UI/Spinner';\n\nconst {getPoll, getPollCount}=require('../../tronServices/pollContract');\n\n\nconst Home=()=>{\n\n    const [pollArray,setPollArray]=useState([]);\n    const history=useHistory();\n    const [pageLoading, setPageLoading] = useState(false);\n\n    useEffect(()=>{\n        setPageLoading(true);\n        getPollCount().then(pollCount=>{\n            const pollIndexArray=Array(pollCount).fill().map((_,index)=>(index));\n            \n            Promise.all(pollIndexArray.map(index=>getPoll(index)))\n            .then(result=>{\n                setPageLoading(false);\n                const _pollArray=[];\n                result.forEach(item=>{\n                    _pollArray.push(item);\n                })\n                setPollArray(_pollArray)\n            })\n            .catch(error=>{\n                setPageLoading(false);\n                console.log(error)\n            })\n            \n        })\n        .catch(error=>{\n            setPageLoading(false);\n            console.log(error)\n        })\n\n    },[])\n\n    const onSelectHandler=(pollIndex)=>{\n        history.push('/poll/' + pollIndex)\n    }\n\n    return (\n        <Container>\n            {!pageLoading && pollArray.length>0 && pollArray.map((poll,index)=>(\n                <PollItem key={index} poll={poll} onSelect={()=>onSelectHandler(index)}></PollItem>\n            ))}\n            {!pageLoading && pollArray.length===0 && <h1>There is no Poll on this DAPP.</h1>}\n            {pageLoading && <Spinner size=\"5\" />}\n        </Container>\n    )\n}\n\nexport default Home;","import React from 'react';\nimport styled from 'styled-components';\n\nconst StyledButton = styled.button`\n  cursor: ${props=>props.disabled ? 'not-allowed': 'pointer'};\n  width: 100%;\n  height: 48px;\n  margin-top: 36px;\n  font-weight: bold;\n  font-size: 1.1rem;\n  background-color: #3f51b5;\n  opacity: ${props=>props.disabled ? .5: 1};\n  color: white;\n  outline: none;\n  border: none;\n  ${props=>!props.disabled && `\n    &:hover{\n      opacity: 0.9;\n    }\n  `}\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\n\nconst Button= props=>{\n    return (\n        <StyledButton {...props}>{props.children}</StyledButton>\n    )\n}\n\n\nexport default Button;","import swal from 'sweetalert';\n\nimport { useEffect, useState } from 'react';\nimport styled from 'styled-components';\n\nimport { useSelector } from 'react-redux';\n\n\nimport Container from '../Container';\n\n\nimport Spinner from '../UI/Spinner';\nimport Button from '../UI/Button';\n\nconst { getPoll, getVoteCounter, vote } = require('../../tronServices/pollContract');\nconst { getUnconfirmedTransactionInfo, tronHexToAscii } = require('../../tronServices/utils');\n\n\n\n\nconst PollWrapper = styled.div`\n  margin-top: 24px;\n  padding: 1rem;\n`;\n\nconst PollQuestion = styled.div`\n  font-size: 2.5rem;\n  margin-bottom: 1rem;\n`;\n\nconst PollDates = styled.div`\n  display:flex;\n  justify-content:space-between;\n`;\n\nconst PollAnswer = styled.div`\n  position: relative;\n  border: 1px solid #eee;\n  cursor: pointer;\n  padding: 8px;\n  margin-top: 64px;\n  &:hover {\n      background-color: azure;\n  }\n`;\n\nconst AnswerVoteCount = styled.div`\n  position:absolute;\n  top:-24px;\n  left:0;\n  width:100%;\n  span.color{\n    background-image:linear-gradient(to right,red 90%,white);\n    width:${({ size = 0 }) => size}%;\n    position:absolute;\n    top:16px;\n    height:5px;\n    left:0;\n    z-index:1;\n  }\n  span.text{\n    top:0;\n    right:0;\n    z-index:1;\n    color:blue;\n    position:absolute;\n  }\n`;\n\n\n\n\n\n\nconst Poll = (props) => {\n\n    const pollIndex = props.match.params.index;\n    const [poll, setPoll] = useState(null);\n    const [voteCounter, setVoteCounter] = useState(null);\n    const [selectedAnswer, setSelectedAnswer] = useState(null);\n\n    const [voteLoading, setVoteLoading] = useState(false);\n    const [pageLoading, setPageLoading] = useState(false);\n\n    const wallet = useSelector(state => state.wallet);\n\n    useEffect(() => {\n        setPageLoading(true);\n        Promise.all([getPoll(pollIndex), getVoteCounter(pollIndex)])\n            .then(result => {\n                setPageLoading(false);\n                setPoll(result[0]);\n                setVoteCounter(result[1]);\n            })\n            .catch(error => {\n                setPageLoading(false);\n                console.log(error);\n            })\n\n    }, [pollIndex]);\n\n\n    const loadVoteCounter = () => {\n        getVoteCounter(pollIndex)\n            .then(_voteCounter => {\n                setVoteLoading(false);\n                setVoteCounter(_voteCounter)\n            })\n            .catch(error => {\n                setVoteLoading(false);\n                console.log(error);\n            })\n    }\n\n\n    const onVoteHandler = () => {\n\n        if (!wallet) {\n            swal('Error', 'Connect to your wallet!', 'error');\n            return;\n        }\n\n\n    \n        if (poll.startDate>(new Date().getTime()/1000)) {\n            swal('Error', 'The poll has not started yet.', 'error');\n            return;\n        }\n    \n        if (poll.finishDate<(new Date().getTime()/1000)) {\n            swal('Error', 'Time to participate in this poll has expired.', 'error');\n            return;\n        }\n\n        setVoteLoading(true);\n        vote(pollIndex, (selectedAnswer - 1))\n            .then(transactionId => {\n\n                console.log('transactionId',transactionId)\n\n                //check if confirmation declined by user\n                if (!transactionId) {\n                    setVoteLoading(false);\n                    return;\n                }\n\n                setTimeout(()=>{\n\n                    getUnconfirmedTransactionInfo(transactionId).then(transactionInfo => {\n                        console.log('transactionInfo',transactionInfo)\n                        if (transactionInfo['result'] === 'FAILED') {\n                            setVoteLoading(false);\n                            let transactionMessage = '';\n                            transactionMessage = transactionMessage + tronHexToAscii(transactionInfo['resMessage']) + ', ';\n                            transactionMessage = transactionMessage + tronHexToAscii(transactionInfo['contractResult'][0]);\n    \n                            transactionMessage = transactionMessage.replace(/[^\\w\\s]/gi, '');\n    \n                            swal('Error', transactionMessage, 'error');\n                        }\n    \n                        loadVoteCounter()\n    \n                    })\n                        .catch(error => {\n                            setVoteLoading(false);\n                            console.log(error)\n                        })\n\n\n                },5000)\n                \n\n            })\n            .catch(error => {\n                setVoteLoading(false);\n                console.log(error)\n            })\n    }\n\n\n    return (\n        <Container>\n            <PollWrapper>\n                {poll && (\n                    <div>\n                        <PollQuestion>\n                            {poll.question}\n                        </PollQuestion>\n                        <PollDates>\n                            <span>\n                                Start-date: {new Date(poll.startDate * 1000).toISOString().slice(0, 10)}\n                            </span>\n                            <span>\n                                Finish-date: {new Date(poll.finishDate * 1000).toISOString().slice(0, 10)}\n                            </span>\n                        </PollDates>\n                        {[1, 2, 3, 4].map(answerNumber => (\n                            <PollAnswer key={answerNumber} onClick={() => setSelectedAnswer(answerNumber)}>\n                                <AnswerVoteCount size={\n                                    voteCounter &&\n                                        voteCounter[`answer${answerNumber}VoteCounter`] > 0 ?\n                                        Math.floor(voteCounter[`answer${answerNumber}VoteCounter`] * 100 / (voteCounter['answer1VoteCounter'] + voteCounter['answer2VoteCounter'] + voteCounter['answer3VoteCounter'] + voteCounter['answer4VoteCounter']))\n                                        : 0\n                                }>\n                                    <span className=\"color\">&nbsp;</span>\n                                    <span className=\"text\">\n                                        {voteCounter ? voteCounter[`answer${answerNumber}VoteCounter`] : 'no '} Vote{voteCounter && voteCounter[`answer${answerNumber}VoteCounter`] > 1 ? 's' : ''}\n                                    </span>\n                                </AnswerVoteCount>\n                                <input\n                                    id={`answer${answerNumber}`}\n                                    type=\"radio\"\n                                    name=\"answer\"\n                                    value={answerNumber}\n                                    checked={selectedAnswer === answerNumber}\n                                    onChange={(event) => {\n                                        setSelectedAnswer(+event.target.value);\n                                    }}\n                                />\n\n                                <label htmlFor={`answer${answerNumber}`}>\n                                    {poll[`answer${answerNumber}`]}\n                                </label>\n                            </PollAnswer>\n                        ))}\n                        <div>\n                            <Button onClick={() => onVoteHandler()} disabled={voteLoading || selectedAnswer === null}>\n                                {voteLoading ? <Spinner size=\"1\" /> : 'Vote'}\n                            </Button>\n                        </div>\n                    </div>\n                )}\n                {pageLoading && <Spinner size=\"5\" />}\n\n            </PollWrapper>\n        </Container>\n    )\n}\n\nexport default Poll;","\nimport swal from 'sweetalert';\n\nimport { useState } from 'react';\nimport { useHistory } from 'react-router-dom';\n\nimport { useSelector } from 'react-redux';\nimport Spinner from '../UI/Spinner';\n\nimport styled from 'styled-components';\n\n\nimport Container from '../Container';\nimport Button from '../UI/Button';\n\nconst createPoll=require('../../tronServices/pollContract').createPoll;\n\nconst StyledItemWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  height:82px;\n  input{\n    height:36px;\n  }\n  div.error{\n    color:red;\n    font-size:10px;\n  }\n`;\n\nconst CreatePoll = () => {\n\n    const history=useHistory();\n    const [pollLoading, setPollLoading] = useState(false);\n    const wallet=useSelector(state=>state.wallet);\n\n\n    const [poll, setPoll] = useState({\n        question: '',\n        answer1: '',\n        answer2: '',\n        answer3: '',\n        answer4: '',\n        startDate: '',\n        finishDate: '',\n    })\n\n\n    const handleChange = (field, value) => {\n        setPoll({\n            ...poll,\n            [field]: value\n        })\n    }\n\n    const validate=()=>{\n        return (\n          poll.question.trim()!==''\n          &&\n          poll.answer1.trim()!==''\n          &&\n          poll.answer2.trim()!==''\n          &&\n          poll.answer3.trim()!==''\n          &&\n          poll.answer4.trim()!==''\n          &&\n          poll.startDate.trim()!==''\n          &&\n          poll.finishDate.trim()!==''\n          &&\n          poll.startDate.trim() >= (new Date().toISOString().slice(0,10))\n          &&\n          poll.startDate.trim() < poll.finishDate.trim()\n         );\n    \n      }\n\n    const onSaveHandler=()=>{\n\n        if(!wallet){\n            swal('Error','Connect to your wallet!','error');\n            return;\n        }\n        \n        const payload={...poll};\n        payload.startDate=Math.floor(new Date(payload.startDate).getTime()/1000)\n        payload.finishDate=Math.floor(new Date(payload.finishDate).getTime()/1000)\n\n        setPollLoading(true);\n        createPoll(\n            payload.question,\n            payload.answer1,\n            payload.answer2,\n            payload.answer3,\n            payload.answer4,\n            payload.startDate,\n            payload.finishDate\n            ).then(transactionId=>{\n                \n                setPollLoading(false);\n\n                //check if confirmation declined by user\n                if(!transactionId){\n                    return;\n                }\n\n                //TODO: check if the transaction failed or not\n                history.push('/')\n            })\n            .catch(error=>{\n                setPollLoading(false);\n                console.log(error)\n            })\n    }\n\n    return (\n        <Container>\n            <h2>Create a Poll</h2>\n\n            {['question', 'answer1', 'answer2', 'answer3', 'answer4'].map(item => (\n                <StyledItemWrapper key={item}>\n                    <label htmlFor={item}>\n                        {item}\n                    </label>\n                    <input\n                        type=\"text\"\n                        value={poll[item]}\n                        onChange={event => handleChange(item, event.target.value)}\n                        id={item}\n                    />\n                </StyledItemWrapper>\n            ))}\n\n            <StyledItemWrapper >\n                <label htmlFor=\"start-date\">\n                    Start Date\n                    </label>\n                <input\n                    type=\"date\"\n                    value={poll.startDate}\n                    onChange={event => handleChange('startDate', event.target.value)}\n                    id=\"start-date\"\n                />\n                {(poll.startDate && poll.startDate<(new Date().toISOString().slice(0,10))) && <div className=\"error\">Minimum value for this field is today </div>}\n            </StyledItemWrapper>\n\n            <StyledItemWrapper >\n                <label htmlFor=\"finish-date\">\n                    Finish Date\n                    </label>\n                <input\n                    type=\"date\"\n                    value={poll.finishDate}\n                    onChange={event => handleChange('finishDate', event.target.value)}\n                    id=\"finish-date\"\n                />\n                {(poll.startDate && poll.finishDate && poll.finishDate<poll.startDate) && <div className=\"error\">Finish date should be after Start date </div>}\n\n            </StyledItemWrapper>\n\n\n            <Button onClick={() => onSaveHandler()} disabled={!validate() || pollLoading}>\n                {pollLoading ? <Spinner size=\"1\" /> : 'Save'}                \n            </Button>\n\n\n        </Container>\n    )\n}\n\nexport default CreatePoll;","\n\nconst NotFound=()=>{\n    return (\n        <h1>NotFound</h1>\n    )\n}\n\nexport default NotFound;","\n\nimport {\n  BrowserRouter,\n  Switch,\n  Route\n} from \"react-router-dom\";\n\n\nimport Menu from './components/Menu';\nimport Home from './components/pages/Home';\nimport Poll from './components/pages/Poll';\nimport CreatePoll from './components/pages/CreatePoll';\nimport NotFound from './components/pages/NotFound';\n\n\nfunction App() {\n  return (\n    <div>\n      <BrowserRouter basename={'/tron-react-poll-dapp'}>\n\n      <Menu />\n      <Switch>\n          <Route path=\"/create-poll\">\n            <CreatePoll />\n          </Route>\n          <Route path=\"/poll/:index\" component={Poll} />\n          <Route path=\"/\" exact>\n            <Home />\n          </Route>\n          <Route path=\"/\" >\n            <NotFound />\n          </Route>\n        </Switch>\n      </BrowserRouter>\n\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { Provider } from 'react-redux';\nimport store from './store/index';\n\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <Provider store={store}>\n      <App />\n    </Provider>,\n  document.getElementById('root')\n);\n\n","\nconst TronWeb = require('tronweb')\n\nconst tronConstants = require('./constants');\n\nexport const getGeneralTronWeb = () => {\n    const HttpProvider = TronWeb.providers.HttpProvider;\n    const fullNode = new HttpProvider(tronConstants.tronFullNode);\n    const solidityNode = new HttpProvider(tronConstants.tronSolidityNode);\n    const eventServer = new HttpProvider(tronConstants.tronEventServer);\n\n    return new TronWeb(fullNode, solidityNode, eventServer, tronConstants.tronGeneralPrivateKey);\n}\n\nconst getUserTronWeb = () => {\n    if (window && window.tronWeb && window.tronWeb.defaultAddress.base58) {\n        return window.tronWeb;\n    }\n}\n\n\n\nexport const getTronContract = async (contractAddress, userOrGeneral) => {\n    let tronWeb;\n    if (userOrGeneral === 'general') {\n        tronWeb = getGeneralTronWeb();\n    } else {\n        tronWeb = getUserTronWeb();\n    }\n    return tronWeb.contract().at(contractAddress)\n}\n\n\nexport const tronHexToDecimal = valueInHex => {\n    return TronWeb.toDecimal(valueInHex);\n}\n\nexport const tronHexToAscii = valueInHex => {\n    return TronWeb.toAscii(valueInHex);\n}\n\n\nexport const getUserTronWallet = () => {\n    if (window.tronWeb && window.tronWeb.defaultAddress.base58) {\n        return window.tronWeb.defaultAddress.base58;\n    }\n}\n\n\nexport const getTransactionInfo = async (transactionId) => {\n    const tronWeb = getGeneralTronWeb();\n    return tronWeb.trx.getTransactionInfo(transactionId)\n}\n\nexport const getUnconfirmedTransactionInfo = async (transactionId) => {\n    const tronWeb = getGeneralTronWeb();\n    return tronWeb.trx.getUnconfirmedTransactionInfo(transactionId)\n}\n\n","//local\n// export const tronPollDappContract=\"TCvYXmDQFAx1ai9dJudFmZLNuEWyb3WeaB\";\n// export const tronPollTokenContract=\"TWSb9ftBuzPoF64HCYKrwyxRLUAHpYSeSu\";\n\n//shasta testnet\nexport const tronPollDappContract=\"TJ8MBRtmiArKmMDZPP5itVwesHSbAPCJhY\";\nexport const tronPollTokenContract=\"TLgt7Zkh56mJvqVFAYyshgvYMqjk14gXSk\";\n\nexport const tronAccounts=[\n    {\n        publicKey:\"TG31Eya5GywMYV2rwq3rwGbep4eoykWREP\",\n        privateKey:\"d8db4dfed48fc23884a1bde2e654cf7e6498ad023892ddbafb3c013573e2bd74\"\n    },\n    {\n        publicKey:\"TTH598f947PU5sXz33PmfPPergcw11jy2S\",\n        privateKey:\"feddacfb92d2817811cee05947ee48a2733e746c6309d8101d248df78cdf7679\"\n    },\n    {\n        publicKey:\"TW9srDmAC2ydc8WfNaLYMnS63iQiWKfgLG\",\n        privateKey:\"fccd3e23c114644d002013f69d3cd0d1d6e8261989b3131d3d02a507e7b4f018\"\n    },\n    {\n        publicKey:\"TT88NtTzYT56fG7avWGrgBkDvrY6MX7rWb\",\n        privateKey:\"378c5553f4ed02b995e5395c3057f2b6bc72b26a854e8353fc2211daa9ff1a20\"\n    },\n    {\n        publicKey:\"TG6i13mQLMM7SrfD8TRSxxDZBQEpUizShs\",\n        privateKey:\"a7c2179a95ea189914517c43adf7b9e130ee27c14e2e81f55975be5b1d59c869\"\n    },\n    {\n        publicKey:\"TQnwk8eSZjFVH9JhzKkaPnV27r6Xxhg4u1\",\n        privateKey:\"a2cc6886212962255777cb1fcc393d12613e60cea4f95877ad1b1bb7e75e8f29\"\n    },\n    {\n        publicKey:\"THagkrFvo2xoASnRgpsMqvusBdAn7DQTcc\",\n        privateKey:\"bea9b1682374a15c351704b27c221155759f72fefaec2d9d52054ebb35569363\"\n    },\n    {\n        publicKey:\"TPiBEmProxmvwuEbPkYe8WCE5EEAHM5zeg\",\n        privateKey:\"7d134b76c1a878bc0318c8d1aacb6f41c46d1ba9a8d8ba2f2cd95b9a81cbc430\"\n    },\n    {\n        publicKey:\"TCXaE1cAYbHM9X3Q8mKDAWU3rq7mPb1vxt\",\n        privateKey:\"4d4695179f5190a53eaa3b1d7cda972f385fafaff2bd90011f67c7c83aa2a7c3\"\n    },\n    {\n        publicKey:\"TWEPD2Li4R4NQ4GrrrWBp4bK7xgsaHs24W\",\n        privateKey:\"5c6c45c09715d1b34249b1b7238c8b1a14e7ffbe71d331caa90c6a2017ebe178\"\n    },\n];\n\n\nexport const tronGeneralPublicKey=tronAccounts[0].publicKey;\nexport const tronGeneralPrivateKey=tronAccounts[0].privateKey;\n\n\n//local\n// const export tronFullNode=\"http://localhost:9090/\";\n//export const tronSolidityNode=\"http://localhost:9090/\";\n//export const tronEventServer=\"http://localhost:9090/\";\n\n//shasta testnet\nexport const tronFullNode=\"https://api.shasta.trongrid.io\";\nexport const tronSolidityNode=\"https://api.shasta.trongrid.io\";\nexport const tronEventServer=\"https://api.shasta.trongrid.io\";\n\n","const tronUtils=require('./utils');\nconst tronConstants=require('./constants');\n\n\n\n\nexport const createPoll=async (question,answer1,answer2,answer3,answer4,startDate,finishDate)=>{\n    let contract=await tronUtils.getTronContract(tronConstants.tronPollDappContract,'user');\n    try {\n        \n        let result=await contract.createPoll(question,answer1,answer2,answer3,answer4,startDate,finishDate).send();\n        return result;\n    } catch (error) {\n        console.log('error',error)\n    }\n}\n\nexport const getPoll=async (pollIndex)=>{\n    let contract=await tronUtils.getTronContract(tronConstants.tronPollDappContract,'general');\n    let poll= await contract.polls(pollIndex).call();\n    poll.startDate=tronUtils.tronHexToDecimal(poll.startDate['_hex']);\n    poll.finishDate=tronUtils.tronHexToDecimal(poll.finishDate['_hex']);\n    return poll;\n}\n\nexport const getPollCount=async ()=>{\n    let contract=await tronUtils.getTronContract(tronConstants.tronPollDappContract,'general');\n    let result= await contract.getPollCount().call();\n    return tronUtils.tronHexToDecimal(result['_hex']);\n}\n\n\nexport const getVoteCounter=async (pollIndex)=>{\n    let contract=await tronUtils.getTronContract(tronConstants.tronPollDappContract,'general');\n    let voteCounter= await contract.voteCounters(pollIndex).call();\n    voteCounter.answer1VoteCounter=tronUtils.tronHexToDecimal(voteCounter.answer1VoteCounter['_hex']);\n    voteCounter.answer2VoteCounter=tronUtils.tronHexToDecimal(voteCounter.answer2VoteCounter['_hex']);\n    voteCounter.answer3VoteCounter=tronUtils.tronHexToDecimal(voteCounter.answer3VoteCounter['_hex']);\n    voteCounter.answer4VoteCounter=tronUtils.tronHexToDecimal(voteCounter.answer4VoteCounter['_hex']);\n    return voteCounter;\n}\n\n\n\nexport const vote=async (pollIndex,answerIndex)=>{\n    let contract=await tronUtils.getTronContract(tronConstants.tronPollDappContract,'user');\n    try {\n        let result=await contract.vote(pollIndex,answerIndex).send();\n        return result;\n    } catch (error) {\n        console.log('error',error)\n    }\n}\n\nexport const setToken=async ()=>{\n    let contract=await tronUtils.getTronContract(tronConstants.tronPollDappContract,'general');\n    try {\n        let result=await contract.setToken(tronConstants.tronPollTokenContract).send();\n        return result;\n    } catch (error) {\n        console.log('error',error)\n    }\n}\n\n"],"sourceRoot":""}