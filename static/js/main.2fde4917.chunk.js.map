{"version":3,"sources":["store/index.js","components/Menu.js","components/PollItem.js","components/Container.js","components/UI/Spinner.js","components/pages/Home.js","components/UI/Button.js","components/pages/Poll.js","components/pages/CreatePoll.js","components/pages/NotFound.js","App.js","index.js","tronServices/utils.js","tronServices/pollContract.js","tronServices/constants.js"],"names":["initialState","wallet","store","createStore","state","action","type","getUserTronWallet","require","MenuStyled","styled","div","Menu","history","useHistory","location","useLocation","useSelector","dispatch","useDispatch","focusable","viewBox","aria-hidden","d","className","pathname","onClick","push","userWallet","swal","StypedPoll","PollItem","props","onSelect","poll","question","StypedContainer","Container","children","StyledDiv","size","Spinner","getPoll","getPollCount","Home","useState","pollArray","setPollArray","pageLoading","setPageLoading","useEffect","then","pollCount","pollIndexArray","Array","fill","map","_","index","Promise","all","result","_pollArray","forEach","item","catch","error","console","log","length","pollIndex","StyledButton","button","disabled","Button","getVoteCounter","vote","getTransactionInfo","tronHexToAscii","PollWrapper","PollQuestion","PollDates","PollAnswer","AnswerVoteCount","Poll","match","params","setPoll","voteCounter","setVoteCounter","selectedAnswer","setSelectedAnswer","voteLoading","setVoteLoading","Date","startDate","toISOString","slice","finishDate","answerNumber","Math","floor","id","name","value","checked","onChange","event","target","htmlFor","transactionId","setTimeout","transactionResult","transactionMessage","replace","createPoll","StyledItemWrapper","CreatePoll","answer1","answer2","answer3","answer4","handleChange","field","payload","getTime","res","onSaveHandler","trim","NotFound","App","path","component","exact","ReactDOM","render","document","getElementById","TronWeb","tronConstants","getGeneralTronWeb","HttpProvider","providers","fullNode","tronFullNode","solidityNode","tronSolidityNode","eventServer","tronEventServer","tronGeneralPrivateKey","getUserTronWeb","window","tronWeb","defaultAddress","base58","getTronContract","contractAddress","userOrGeneral","a","contract","at","trx","module","exports","valueInHex","toAscii","tronHexToDecimal","toDecimal","tronUtils","tronPollDappContract","send","polls","call","voteCounters","answer1VoteCounter","answer2VoteCounter","answer3VoteCounter","answer4VoteCounter","answerIndex","setToken","tronPollTokenContract","tronAccounts","publicKey","privateKey","tronGeneralPublicKey"],"mappings":"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","file":"static/js/main.2fde4917.chunk.js","sourcesContent":["import {createStore} from 'redux';\n\nconst initialState={\n    wallet:null\n}\n\nconst walletReducer=(state=initialState,action)=>{\n\n    if(action.type==='connect'){\n        return {\n            wallet:action.wallet\n        }\n    }\n\n    if(action.type==='disconnect'){\n        return {\n            wallet:null\n        }\n    }\n\n    return state;\n}\n\n\nconst store=createStore(walletReducer);\n\nexport default store;","import swal from 'sweetalert';\n\nimport { useHistory, useLocation } from 'react-router-dom';\n\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport styled from 'styled-components';\n\n// import { getUserTronWallet } from '../../tronServices/utils';\nconst { getUserTronWallet }=require('../tronServices/utils');\n\nconst MenuStyled = styled.div`\n  box-sizing: border-box;\n  width:100%;\n  height:64px;\n  color: #fff;\n  background-color: #3f51b5;\n  display: flex;\n  align-items: center;\n  padding-left: 1.4rem;\n  padding-right: 1.4rem;\n  font-size: 21px;\n  svg{\n    padding-right:1.4rem;\n    fill: currentColor;\n    width: 1em;\n    height: 1em;\n    display: inline-block;\n    font-size: 1.5rem;\n    transition: fill 200ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;\n    flex-shrink: 0;\n    user-select: none;\n  }\n  span.title{\n    flex-grow:1;\n  }\n  span.menu{\n    cursor:pointer;\n    font-size: 16px;\n    margin-left:0.7rem;\n    margin-right:0.7rem;\n  }\n\n  span.wallet{\n    position:absolute;\n    right:24px;\n    top:68px;\n    color:#000;\n    font-size:12px;\n    cursor:pointer\n  }\n  span.wallet.connected{\n    cursor:default;\n  }\n`;\n\nconst Menu = () => {\n\n  const history = useHistory();\n  const location = useLocation();\n\n  const wallet=useSelector(state=>state.wallet);\n\n  const dispatch=useDispatch();\n  \n\n  const onConnect=()=>{\n    const userWallet=getUserTronWallet();\n    if(userWallet){\n      dispatch({\n        type:'connect',\n        wallet:userWallet\n      });\n    }else{\n\n      swal('Error','Install tronlink to use this DAPP','error');\n       \n      dispatch({\n        type:'disconnect'\n      }); \n    }\n  }\n\n  return (\n    <MenuStyled>\n      <svg focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M3 18h18v-2H3v2zm0-5h18v-2H3v2zm0-7v2h18V6H3z\"></path></svg>\n      <span className=\"title\">Tron React Poll DAPP</span>\n\n      {location.pathname === '/' && (<span className=\"menu\" onClick={() => {\n        history.push('/create-poll')\n      }}>Create a Poll</span>)}\n\n      {location.pathname !== '/' && (<span className=\"menu\" onClick={() => {\n        history.push('/')\n      }}>HOME</span>)}\n\n\n\n      {!wallet && <span className=\"wallet\" onClick={onConnect}>\n        Connect to Tronlink\n      </span>}\n      {wallet && <span className=\"wallet connected\" >Connected: {wallet}</span>}\n\n\n    </MenuStyled>\n  )\n}\n\nexport default Menu;","\nimport styled from 'styled-components';\n\nconst StypedPoll=styled.div`\n    padding: 1rem;\n    font-size: 2rem;\n    border-bottom: 1px solid #eee;\n    margin: 1rem;\n    cursor: pointer;\n    &:hover{\n        opacity:0.8;\n    }\n`;\n\nconst PollItem=(props)=>{\n    return (\n       <StypedPoll onClick={props.onSelect}>\n           {props.poll.question}\n       </StypedPoll>\n    )\n}\n\nexport default PollItem;","import styled from 'styled-components';\n\nconst StypedContainer=styled.div`\n    padding: 1rem;\n    border: 1px solid #eee;\n    margin: 2rem auto;\n    max-width:1280px;\n`;\n\n\nconst Container=(props)=>{\n    return (\n       <StypedContainer>\n           {props.children}\n       </StypedContainer>\n    )\n}\n\nexport default Container;","import React from 'react';\nimport styled from 'styled-components';\n\nconst StyledDiv =styled.div`\nmargin:auto;\n&,\n&:after {\n  border-radius: 50%;\n  overflow: hidden;\n  width: ${props=>props.size * 2}em;\n  height: ${props=>props.size * 2}em;\n}\n& {\n  font-size: 10px;\n  position: relative;\n  text-indent: -9999em;\n  border-top: ${props=>props.size * .22}em solid rgba(255, 255, 255, 0.2);\n  border-right: ${props=>props.size * .22}em solid rgba(255, 255, 255, 0.2);\n  border-bottom: ${props=>props.size * .22}em solid rgba(255, 255, 255, 0.2);\n  border-left: ${props=>props.size * .22}em solid #000000;\n  border-left-color:inherit;\n  -webkit-transform: translateZ(0);\n  -ms-transform: translateZ(0);\n  transform: translateZ(0);\n  -webkit-animation: load8 1.1s infinite linear;\n  animation: load8 1.1s infinite linear;\n}\n@-webkit-keyframes load8 {\n  0% {\n    -webkit-transform: rotate(0deg);\n    transform: rotate(0deg);\n  }\n  100% {\n    -webkit-transform: rotate(360deg);\n    transform: rotate(360deg);\n  }\n}\n@keyframes load8 {\n  0% {\n    -webkit-transform: rotate(0deg);\n    transform: rotate(0deg);\n  }\n  100% {\n    -webkit-transform: rotate(360deg);\n    transform: rotate(360deg);\n  }\n}\n`;\n\nconst Spinner = props => {\n\n    return (\n        <StyledDiv size={props.size ?? 5}>\n            Loading...\n        </StyledDiv>\n    );\n}\n\nexport default Spinner;","import React, {useState, useEffect} from 'react';\nimport {useHistory} from 'react-router-dom';\n\nimport PollItem from '../PollItem';\n// import {getPoll, getPollCount} from '../../tronServices/pollContract';\n\nimport Container from '../Container';\nimport Spinner from '../UI/Spinner';\n\nconst {getPoll, getPollCount}=require('../../tronServices/pollContract');\n\n\nconst Home=()=>{\n\n    const [pollArray,setPollArray]=useState([]);\n    const history=useHistory();\n    const [pageLoading, setPageLoading] = useState(false);\n\n    useEffect(()=>{\n        setPageLoading(true);\n        getPollCount().then(pollCount=>{\n            const pollIndexArray=Array(pollCount).fill().map((_,index)=>(index));\n            \n            Promise.all(pollIndexArray.map(index=>getPoll(index)))\n            .then(result=>{\n                setPageLoading(false);\n                const _pollArray=[];\n                result.forEach(item=>{\n                    _pollArray.push(item);\n                })\n                setPollArray(_pollArray)\n            })\n            .catch(error=>{\n                setPageLoading(false);\n                console.log(error)\n            })\n            \n        })\n        .catch(error=>{\n            setPageLoading(false);\n            console.log(error)\n        })\n\n    },[])\n\n    const onSelectHandler=(pollIndex)=>{\n        history.push('/poll/' + pollIndex)\n    }\n\n    return (\n        <Container>\n            {!pageLoading && pollArray.length>0 && pollArray.map((poll,index)=>(\n                <PollItem key={index} poll={poll} onSelect={()=>onSelectHandler(index)}></PollItem>\n            ))}\n            {!pageLoading && pollArray.length===0 && <h1>There is no Poll on this DAPP.</h1>}\n            {pageLoading && <Spinner size=\"5\" />}\n        </Container>\n    )\n}\n\nexport default Home;","import React from 'react';\nimport styled from 'styled-components';\n\nconst StyledButton = styled.button`\n  cursor: ${props=>props.disabled ? 'not-allowed': 'pointer'};\n  width: 100%;\n  height: 48px;\n  margin-top: 36px;\n  font-weight: bold;\n  font-size: 1.1rem;\n  background-color: #3f51b5;\n  opacity: ${props=>props.disabled ? .5: 1};\n  color: white;\n  outline: none;\n  border: none;\n  ${props=>!props.disabled && `\n    &:hover{\n      opacity: 0.9;\n    }\n  `}\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\n\nconst Button= props=>{\n    return (\n        <StyledButton {...props}>{props.children}</StyledButton>\n    )\n}\n\n\nexport default Button;","import swal from 'sweetalert';\n\nimport { useEffect, useState } from 'react';\nimport styled from 'styled-components';\n\nimport { useSelector } from 'react-redux';\n\n\nimport Container from '../Container';\n\n// import { getPoll, getVoteCounter, vote } from '../../tronServices/pollContract';\n// import { getTransactionInfo, tronHexToAscii } from '../../tronServices/utils';\n\n\n\nimport Spinner from '../UI/Spinner';\nimport Button from '../UI/Button';\n\nconst { getPoll, getVoteCounter, vote }=require('../../tronServices/pollContract');\nconst { getTransactionInfo, tronHexToAscii }=require('../../tronServices/utils');\n\n\n\n\nconst PollWrapper = styled.div`\n  margin-top: 24px;\n  padding: 1rem;\n`;\n\nconst PollQuestion = styled.div`\n  font-size: 2.5rem;\n  margin-bottom: 1rem;\n`;\n\nconst PollDates = styled.div`\n  display:flex;\n  justify-content:space-between;\n`;\n\nconst PollAnswer = styled.div`\n  position: relative;\n  border: 1px solid #eee;\n  cursor: pointer;\n  padding: 8px;\n  margin-top: 64px;\n  &:hover {\n      background-color: azure;\n  }\n`;\n\nconst AnswerVoteCount = styled.div`\n  position:absolute;\n  top:-24px;\n  left:0;\n  width:100%;\n  span.color{\n    background-image:linear-gradient(to right,red 90%,white);\n    width:${({ size = 0 }) => size}%;\n    position:absolute;\n    top:16px;\n    height:5px;\n    left:0;\n    z-index:1;\n  }\n  span.text{\n    top:0;\n    right:0;\n    z-index:1;\n    color:blue;\n    position:absolute;\n  }\n`;\n\n\n\n\n\n\nconst Poll = (props) => {\n\n    const pollIndex = props.match.params.index;\n    const [poll, setPoll] = useState(null);\n    const [voteCounter, setVoteCounter] = useState(null);\n    const [selectedAnswer, setSelectedAnswer] = useState(null);\n\n    const [voteLoading, setVoteLoading] = useState(false);\n    const [pageLoading, setPageLoading] = useState(false);\n\n    const wallet=useSelector(state=>state.wallet);\n\n    useEffect(() => {\n        setPageLoading(true);\n        Promise.all([getPoll(pollIndex), getVoteCounter(pollIndex)])\n        .then(result => {\n            setPageLoading(false);\n            setPoll(result[0]);\n            setVoteCounter(result[1]);\n        })\n        .catch(error=>{\n            setPageLoading(false);\n            console.log(error);\n        })\n\n    }, [pollIndex]);\n\n\n    const onVoteHandler = () => {\n\n        if(!wallet){\n            swal('Error','Connect to your wallet!','error');\n            return;\n        }\n\n        console.log(selectedAnswer)\n        setVoteLoading(true);\n        vote(pollIndex, (selectedAnswer - 1))\n            .then(transactionId => {\n                console.log(transactionId)\n                \n                setTimeout(()=>{\n\n                    getTransactionInfo(transactionId).then(transactionResult=>{\n                        setVoteLoading(false);\n                        console.log(transactionResult)\n                        if(transactionResult['result']==='FAILED'){\n                            let transactionMessage='';\n                            transactionMessage=transactionMessage + tronHexToAscii(transactionResult['resMessage']) + ', ';\n                            transactionMessage=transactionMessage + tronHexToAscii(transactionResult['contractResult'][0]);\n\n                            transactionMessage = transactionMessage.replace(/[^\\w\\s]/gi, '');\n\n                            swal('Error',transactionMessage,'error');\n                        }\n    \n                    })\n                    .catch(error => {\n                        setVoteLoading(false);\n                        console.log(error)\n                    })\n\n                },10000);\n\n\n              })\n            .catch(error => {\n                setVoteLoading(false);\n                console.log(error)\n            })\n    }\n\n\n    return (\n        <Container>\n            <PollWrapper>\n                {poll && (\n                    <div>\n                        <PollQuestion>\n                            {poll.question}\n                        </PollQuestion>\n                        <PollDates>\n                            <span>\n                                Start-date: {new Date(poll.startDate * 1000).toISOString().slice(0, 10)}\n                            </span>\n                            <span>\n                                Finish-date: {new Date(poll.finishDate * 1000).toISOString().slice(0, 10)}\n                            </span>\n                        </PollDates>\n                        {[1, 2, 3, 4].map(answerNumber => (\n                            <PollAnswer key={answerNumber} onClick={() => setSelectedAnswer(answerNumber)}>\n                                <AnswerVoteCount size={\n                                    voteCounter && \n                                    voteCounter[`answer${answerNumber}VoteCounter`]>0 ?  \n                                    Math.floor(voteCounter[`answer${answerNumber}VoteCounter`] * 100 / (voteCounter['answer1VoteCounter'] + voteCounter['answer2VoteCounter'] + voteCounter['answer3VoteCounter'] + voteCounter['answer4VoteCounter']))\n                                    : 0\n                                    }>\n                                    <span className=\"color\">&nbsp;</span>\n                                    <span className=\"text\">\n                                        {voteCounter ? voteCounter[`answer${answerNumber}VoteCounter`] : 'no '} Vote{voteCounter && voteCounter[`answer${answerNumber}VoteCounter`] > 1 ? 's' : ''}\n                                    </span>\n                                </AnswerVoteCount>\n                                <input\n                                    id={`answer${answerNumber}`}\n                                    type=\"radio\"\n                                    name=\"answer\"\n                                    value={answerNumber}\n                                    checked={selectedAnswer === answerNumber}\n                                    onChange={(event) => {\n                                        setSelectedAnswer(+event.target.value);\n                                    }}\n                                />\n\n                                <label htmlFor={`answer${answerNumber}`}>\n                                    {poll[`answer${answerNumber}`]}\n                                </label>\n                            </PollAnswer>\n                        ))}\n                        <div>\n                            <Button onClick={() => onVoteHandler()} disabled={voteLoading || selectedAnswer === null}>\n                                {voteLoading ? <Spinner size=\"1\" /> : 'Vote'}\n                            </Button>\n                        </div>\n                    </div>\n                )}\n                {pageLoading && <Spinner size=\"5\" />}\n\n            </PollWrapper>\n        </Container>\n    )\n}\n\nexport default Poll;","\nimport swal from 'sweetalert';\n\nimport { useState } from 'react';\nimport { useHistory } from 'react-router-dom';\n\nimport { useSelector } from 'react-redux';\n\nimport styled from 'styled-components';\n\n// import {createPoll} from '../../tronServices/pollContract';\n\nimport Container from '../Container';\nimport Button from '../UI/Button';\n\nconst createPoll=require('../../tronServices/pollContract').createPoll;\n\n\nconst StyledItemWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  height:76px;\n  input{\n    height:36px;\n  }\n`;\n\nconst CreatePoll = () => {\n\n    const history=useHistory();\n    const wallet=useSelector(state=>state.wallet);\n\n\n    const [poll, setPoll] = useState({\n        question: '',\n        answer1: '',\n        answer2: '',\n        answer3: '',\n        answer4: '',\n        startDate: '',\n        finishDate: '',\n    })\n\n\n    const handleChange = (field, value) => {\n        setPoll({\n            ...poll,\n            [field]: value\n        })\n    }\n\n    const validate=()=>{\n        return (\n          poll.question.trim()!==''\n          &&\n          poll.answer1.trim()!==''\n          &&\n          poll.answer2.trim()!==''\n          &&\n          poll.answer3.trim()!==''\n          &&\n          poll.answer4.trim()!==''\n          &&\n          poll.startDate.trim()!==''\n          &&\n          poll.finishDate.trim()!==''\n          &&\n          poll.startDate.trim() >= (new Date().toISOString().slice(0,10))\n          &&\n          poll.startDate.trim() < poll.finishDate.trim()\n         );\n    \n      }\n\n    const onSaveHandler=()=>{\n\n        if(!wallet){\n            swal('Error','Connect to your wallet!','error');\n            return;\n        }\n        \n        const payload={...poll};\n        payload.startDate=Math.floor(new Date(payload.startDate).getTime()/1000)\n        payload.finishDate=Math.floor(new Date(payload.finishDate).getTime()/1000)\n\n        createPoll(\n            payload.question,\n            payload.answer1,\n            payload.answer2,\n            payload.answer3,\n            payload.answer4,\n            payload.startDate,\n            payload.finishDate\n            ).then(res=>{\n                history.push('/')\n            })\n            .catch(error=>{\n                console.log(error)\n            })\n        // console.log(payload)\n    }\n\n    return (\n        <Container>\n\n            {['question', 'answer1', 'answer2', 'answer3', 'answer4'].map(item => (\n                <StyledItemWrapper key={item}>\n                    <label htmlFor={item}>\n                        {item}\n                    </label>\n                    <input\n                        type=\"text\"\n                        value={poll[item]}\n                        onChange={event => handleChange(item, event.target.value)}\n                        id={item}\n                    />\n                </StyledItemWrapper>\n            ))}\n\n            <StyledItemWrapper >\n                <label htmlFor=\"start-date\">\n                    Start Date\n                    </label>\n                <input\n                    type=\"date\"\n                    value={poll.startDate}\n                    onChange={event => handleChange('startDate', event.target.value)}\n                    id=\"start-date\"\n                />\n            </StyledItemWrapper>\n\n            <StyledItemWrapper >\n                <label htmlFor=\"finish-date\">\n                    Finish Date\n                    </label>\n                <input\n                    type=\"date\"\n                    value={poll.finishDate}\n                    onChange={event => handleChange('finishDate', event.target.value)}\n                    id=\"finish-date\"\n                />\n            </StyledItemWrapper>\n\n\n            <Button onClick={() => onSaveHandler()} disabled={!validate()}>\n                Save                \n            </Button>\n\n\n        </Container>\n    )\n}\n\nexport default CreatePoll;","\n\nconst NotFound=()=>{\n    return (\n        <h1>NotFound</h1>\n    )\n}\n\nexport default NotFound;","\n\nimport {\n  BrowserRouter,\n  Switch,\n  Route\n} from \"react-router-dom\";\n\n\nimport Menu from './components/Menu';\nimport Home from './components/pages/Home';\nimport Poll from './components/pages/Poll';\nimport CreatePoll from './components/pages/CreatePoll';\nimport NotFound from './components/pages/NotFound';\n\n\nfunction App() {\n  return (\n    <div>\n      <BrowserRouter>\n\n      <Menu />\n      <Switch>\n          <Route path=\"/create-poll\">\n            <CreatePoll />\n          </Route>\n          <Route path=\"/poll/:index\" component={Poll} />\n          <Route path=\"/\" exact>\n            <Home />\n          </Route>\n          <Route path=\"/\" >\n            <NotFound />\n          </Route>\n        </Switch>\n      </BrowserRouter>\n\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { Provider } from 'react-redux';\nimport store from './store/index';\n\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <Provider store={store}>\n      <App />\n    </Provider>,\n  document.getElementById('root')\n);\n\n","\nconst TronWeb = require('tronweb')\n\nconst tronConstants = require('./constants');\n\nconst getGeneralTronWeb = () => {\n    const HttpProvider = TronWeb.providers.HttpProvider;\n    const fullNode = new HttpProvider(tronConstants.tronFullNode);\n    const solidityNode = new HttpProvider(tronConstants.tronSolidityNode);\n    const eventServer = new HttpProvider(tronConstants.tronEventServer);\n\n    return new TronWeb(fullNode, solidityNode, eventServer, tronConstants.tronGeneralPrivateKey);\n}\n\nconst getUserTronWeb = () => {\n    if (window && window.tronWeb && window.tronWeb.defaultAddress.base58) {\n        return window.tronWeb;\n    }\n}\n\n\n\nconst getTronContract = async (contractAddress, userOrGeneral) => {\n    let tronWeb;\n    if (userOrGeneral === 'general') {\n        tronWeb = getGeneralTronWeb();\n    } else {\n        tronWeb = getUserTronWeb();\n    }\n    return tronWeb.contract().at(contractAddress)\n}\n\n\nconst tronHexToDecimal = valueInHex => {\n    return TronWeb.toDecimal(valueInHex);\n}\n\nconst tronHexToAscii = valueInHex => {\n    return TronWeb.toAscii(valueInHex);\n}\n\n\nconst getUserTronWallet = () => {\n    if (window.tronWeb && window.tronWeb.defaultAddress.base58) {\n        return window.tronWeb.defaultAddress.base58;\n    }\n}\n\n\nconst getTransactionInfo = async (transactionId) => {\n    const tronWeb = getGeneralTronWeb();\n    return tronWeb.trx.getTransactionInfo(transactionId)\n}\n\nmodule.exports.getGeneralTronWeb = getGeneralTronWeb;\nmodule.exports.getTronContract = getTronContract;\nmodule.exports.tronHexToAscii = tronHexToAscii;\nmodule.exports.tronHexToDecimal = tronHexToDecimal;\nmodule.exports.getUserTronWallet = getUserTronWallet;\nmodule.exports.getTransactionInfo = getTransactionInfo;","const tronUtils=require('./utils');\nconst tronConstants=require('./constants');\n\n\n\n\nconst createPoll=async (question,answer1,answer2,answer3,answer4,startDate,finishDate)=>{\n    let contract=await tronUtils.getTronContract(tronConstants.tronPollDappContract,'user');\n    try {\n        \n        let result=await contract.createPoll(question,answer1,answer2,answer3,answer4,startDate,finishDate).send();\n        return result;\n    } catch (error) {\n        console.log('error',error)\n    }\n}\n\nconst getPoll=async (pollIndex)=>{\n    let contract=await tronUtils.getTronContract(tronConstants.tronPollDappContract,'general');\n    let poll= await contract.polls(pollIndex).call();\n    poll.startDate=tronUtils.tronHexToDecimal(poll.startDate['_hex']);\n    poll.finishDate=tronUtils.tronHexToDecimal(poll.finishDate['_hex']);\n    return poll;\n}\n\nconst getPollCount=async ()=>{\n    let contract=await tronUtils.getTronContract(tronConstants.tronPollDappContract,'general');\n    let result= await contract.getPollCount().call();\n    return tronUtils.tronHexToDecimal(result['_hex']);\n}\n\n\nconst getVoteCounter=async (pollIndex)=>{\n    let contract=await tronUtils.getTronContract(tronConstants.tronPollDappContract,'general');\n    let voteCounter= await contract.voteCounters(pollIndex).call();\n    voteCounter.answer1VoteCounter=tronUtils.tronHexToDecimal(voteCounter.answer1VoteCounter['_hex']);\n    voteCounter.answer2VoteCounter=tronUtils.tronHexToDecimal(voteCounter.answer2VoteCounter['_hex']);\n    voteCounter.answer3VoteCounter=tronUtils.tronHexToDecimal(voteCounter.answer3VoteCounter['_hex']);\n    voteCounter.answer4VoteCounter=tronUtils.tronHexToDecimal(voteCounter.answer4VoteCounter['_hex']);\n    return voteCounter;\n}\n\n\n\nconst vote=async (pollIndex,answerIndex)=>{\n    let contract=await tronUtils.getTronContract(tronConstants.tronPollDappContract,'user');\n    try {\n        let result=await contract.vote(pollIndex,answerIndex).send();\n        return result;\n    } catch (error) {\n        console.log('error',error)\n    }\n}\n\nconst setToken=async ()=>{\n    let contract=await tronUtils.getTronContract(tronConstants.tronPollDappContract,'general');\n    try {\n        let result=await contract.setToken(tronConstants.tronPollTokenContract).send();\n        return result;\n    } catch (error) {\n        console.log('error',error)\n    }\n}\n\n\n\nmodule.exports.createPoll=createPoll;\nmodule.exports.getPoll=getPoll;\nmodule.exports.vote=vote;\nmodule.exports.getVoteCounter=getVoteCounter;\nmodule.exports.getPollCount=getPollCount;\nmodule.exports.setToken=setToken;","//local\n// const tronPollDappContract=\"TCvYXmDQFAx1ai9dJudFmZLNuEWyb3WeaB\";\n// const tronPollTokenContract=\"TWSb9ftBuzPoF64HCYKrwyxRLUAHpYSeSu\";\n\n//shasta testnet\nconst tronPollDappContract=\"TJ8MBRtmiArKmMDZPP5itVwesHSbAPCJhY\";\nconst tronPollTokenContract=\"TLgt7Zkh56mJvqVFAYyshgvYMqjk14gXSk\";\n\nconst tronAccounts=[\n    {\n        publicKey:\"TG31Eya5GywMYV2rwq3rwGbep4eoykWREP\",\n        privateKey:\"d8db4dfed48fc23884a1bde2e654cf7e6498ad023892ddbafb3c013573e2bd74\"\n    },\n    {\n        publicKey:\"TTH598f947PU5sXz33PmfPPergcw11jy2S\",\n        privateKey:\"feddacfb92d2817811cee05947ee48a2733e746c6309d8101d248df78cdf7679\"\n    },\n    {\n        publicKey:\"TW9srDmAC2ydc8WfNaLYMnS63iQiWKfgLG\",\n        privateKey:\"fccd3e23c114644d002013f69d3cd0d1d6e8261989b3131d3d02a507e7b4f018\"\n    },\n    {\n        publicKey:\"TT88NtTzYT56fG7avWGrgBkDvrY6MX7rWb\",\n        privateKey:\"378c5553f4ed02b995e5395c3057f2b6bc72b26a854e8353fc2211daa9ff1a20\"\n    },\n    {\n        publicKey:\"TG6i13mQLMM7SrfD8TRSxxDZBQEpUizShs\",\n        privateKey:\"a7c2179a95ea189914517c43adf7b9e130ee27c14e2e81f55975be5b1d59c869\"\n    },\n    {\n        publicKey:\"TQnwk8eSZjFVH9JhzKkaPnV27r6Xxhg4u1\",\n        privateKey:\"a2cc6886212962255777cb1fcc393d12613e60cea4f95877ad1b1bb7e75e8f29\"\n    },\n    {\n        publicKey:\"THagkrFvo2xoASnRgpsMqvusBdAn7DQTcc\",\n        privateKey:\"bea9b1682374a15c351704b27c221155759f72fefaec2d9d52054ebb35569363\"\n    },\n    {\n        publicKey:\"TPiBEmProxmvwuEbPkYe8WCE5EEAHM5zeg\",\n        privateKey:\"7d134b76c1a878bc0318c8d1aacb6f41c46d1ba9a8d8ba2f2cd95b9a81cbc430\"\n    },\n    {\n        publicKey:\"TCXaE1cAYbHM9X3Q8mKDAWU3rq7mPb1vxt\",\n        privateKey:\"4d4695179f5190a53eaa3b1d7cda972f385fafaff2bd90011f67c7c83aa2a7c3\"\n    },\n    {\n        publicKey:\"TWEPD2Li4R4NQ4GrrrWBp4bK7xgsaHs24W\",\n        privateKey:\"5c6c45c09715d1b34249b1b7238c8b1a14e7ffbe71d331caa90c6a2017ebe178\"\n    },\n];\n\n\nconst tronGeneralPublicKey=tronAccounts[0].publicKey;\nconst tronGeneralPrivateKey=tronAccounts[0].privateKey;\n\n\n//local\n// const tronFullNode=\"http://localhost:9090/\";\n// const tronSolidityNode=\"http://localhost:9090/\";\n// const tronEventServer=\"http://localhost:9090/\";\n\n//shasta testnet\nconst tronFullNode=\"https://api.shasta.trongrid.io\";\nconst tronSolidityNode=\"https://api.shasta.trongrid.io\";\nconst tronEventServer=\"https://api.shasta.trongrid.io\";\n\n\nmodule.exports.tronPollDappContract=tronPollDappContract;\nmodule.exports.tronPollTokenContract=tronPollTokenContract;\nmodule.exports.tronAccounts=tronAccounts;\n\nmodule.exports.tronFullNode=tronFullNode;\nmodule.exports.tronSolidityNode=tronSolidityNode;\nmodule.exports.tronEventServer=tronEventServer;\n\n\nmodule.exports.tronGeneralPublicKey=tronGeneralPublicKey;\nmodule.exports.tronGeneralPrivateKey=tronGeneralPrivateKey;\n"],"sourceRoot":""}